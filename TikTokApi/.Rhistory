interval <- 30
time.old <- timemin[1]
# 1. Binary sequence as vector ex: 0,1,0,0,1
# 2. Binary sequence as list
# where there should be the a 1 there are the index of post that were posted at the time interval we are looking as
# ex: 0,2,0,5,0,0 <--- as list
start.time <- min(timemin)
bin.num <- ((timemin-min(timemin))%/%30)+1
# time intervals of min
convert.binary.seq <- function(time, interval){
starttime <- 1546318800/60 # convert to min
bin.num <- ((time-starttime)%/%interval)+1
binary.seq <- c(rep(0,length.out=max(bin.num)))
binary.seq[bin.num] <- 1
return(binary.seq)
}
# convert.binary.seq(as.matrix(my_data), 10)
#as.matrix(my_data)
data <- vector()
list.out <- list()
min.time <- vector()
max.time <- vector()
iter <- 118 # number of weeks in our data collection
out <- matrix(NA, nrow=iter, ncol=336)
data.time <- Sys.glob("HonThesis-OdalysBar/extract-from-odalyss-list/timestamps/*")
for(i in 1:length(data.time)){
my_data <- read.delim(data.time[i],header = FALSE)$V1/60
my_data <- my_data[which(my_data >= (1546318800/60))]
# data <- c(data, my_data)
# min.time[i] <- min(my_data)
# max.time[i] <- max(my_data)
seq <-convert.binary.seq(my_data, interval = 30)
endweek <- 336
begweek <- 1
for (n in 1:iter){
out[n,] <- seq[begweek:endweek]
endweek <- endweek + 336
begweek <- begweek + 336
}
list.out[[i]] <- out
tmp <- paste0(seq, collapse = "")
fwrite(list(tmp), file = paste0("seq", "_", i, ".txt"))
# show(sum(seq)/length(seq))
}
# starttime <- min(min.time) # start damy_dtte Tue May 19 2015 04:23:11 GMT
# endtime <- max(max.time) # end date Tue Apr 13 2021 08:17:13 GMT
seq
# 168 hours in 1 week so 169*2 = 336 for 30min intervals
# 52 weeks in 1 year
# our data is roughly 2 years 3 months and 2 weeks
# 52*2+3*4+2 = 118 weeks/ rows
list.out[[130]]
strsplit(data.time[1], "/")
strsplit(data.time[1], "/")
strsplit(data.time[1], "/")[4]
tail(strsplit(data.time[1], "/"))
split.string <- strsplit(data.time[1], "/")
split.string[4]
split.string
split.string <- c(strsplit(data.time[1], "/"))
split.string
split.string[[1]]
split.string[[1]][4]
split.string <- strsplit(data.time[1], "/")
split.string[[1]][4]
split.string <- strsplit(data.time[1], "/")[[1]][4]
split.string
strsplit(split.string, "-")
strsplit(split.string, "-")
split.string <- strsplit(data.time[1], "/")[[1]][4]
strsplit(split.string, "-")
strsplit(split.string, "-")
strsplit(split.string, "_")
strsplit(split.string, "_")[[1]][1]
username <- strsplit(split.string, "_")[[1]][1]
data <- vector()
list.out <- list()
min.time <- vector()
max.time <- vector()
iter <- 118 # number of weeks in our data collection
out <- matrix(NA, nrow=iter, ncol=336)
data.time <- Sys.glob("HonThesis-OdalysBar/extract-from-odalyss-list/timestamps/*")
for(i in 1:length(data.time)){
my_data <- read.delim(data.time[i],header = FALSE)$V1/60
my_data <- my_data[which(my_data >= (1546318800/60))]
# data <- c(data, my_data)
# min.time[i] <- min(my_data)
# max.time[i] <- max(my_data)
seq <-convert.binary.seq(my_data, interval = 30)
endweek <- 336
begweek <- 1
for (n in 1:iter){
out[n,] <- seq[begweek:endweek]
endweek <- endweek + 336
begweek <- begweek + 336
}
list.out[[i]] <- out
tmp <- paste0(seq, collapse = "")
split.string <- strsplit(data.time[1], "/")[[1]][4]
username <- strsplit(split.string, "_")[[1]][1]
fwrite(list(tmp), file = paste0("seq", "_", username, ".txt"))
# show(sum(seq)/length(seq))
}
data <- vector()
list.out <- list()
min.time <- vector()
max.time <- vector()
iter <- 118 # number of weeks in our data collection
out <- matrix(NA, nrow=iter, ncol=336)
data.time <- Sys.glob("HonThesis-OdalysBar/extract-from-odalyss-list/timestamps/*")
for(i in 1:length(data.time)){
my_data <- read.delim(data.time[i],header = FALSE)$V1/60
my_data <- my_data[which(my_data >= (1546318800/60))]
# data <- c(data, my_data)
# min.time[i] <- min(my_data)
# max.time[i] <- max(my_data)
seq <-convert.binary.seq(my_data, interval = 30)
endweek <- 336
begweek <- 1
for (n in 1:iter){
out[n,] <- seq[begweek:endweek]
endweek <- endweek + 336
begweek <- begweek + 336
}
list.out[[i]] <- out
tmp <- paste0(seq, collapse = "")
split.string <- strsplit(data.time[i], "/")[[1]][4]
username <- strsplit(split.string, "_")[[1]][1]
fwrite(list(tmp), file = paste0("seq", "_", username, ".txt"))
# show(sum(seq)/length(seq))
}
# starttime <- min(min.time) # start damy_dtte Tue May 19 2015 04:23:11 GMT
# endtime <- max(max.time) # end date Tue Apr 13 2021 08:17:13 GMT
seq
# 168 hours in 1 week so 169*2 = 336 for 30min intervals
# 52 weeks in 1 year
# our data is roughly 2 years 3 months and 2 weeks
# 52*2+3*4+2 = 118 weeks/ rows
list.out[[130]]
split.string <- strsplit(data.time[1], "/")[[1]][4]
username <- strsplit(split.string, "_")[[1]][1]
list.out <- list() # list that will contain string of 0 and 1s for each user
# min.time <- vector() # to find start time
# max.time <- vector() # to find end time
iter <- 118 # number of weeks in our data collection
out <- matrix(NA, nrow=iter, ncol=336) # matrix that will hold 0 and 1 for the given user
data.time <- Sys.glob("HonThesis-OdalysBar/extract-from-odalyss-list/timestamps/*")
for(i in 1:length(data.time)){ # from the first to last user
my_data <- read.delim(data.time[i],header = FALSE)$V1/60 # importing user data
my_data <- my_data[which(my_data >= (1546318800/60))] # removing data from before Jan 1 2018
# min.time[i] <- min(my_data)
# max.time[i] <- max(my_data)
seq <-convert.binary.seq(my_data, interval = 30) # converting timestamps to binary series
endweek <- 336 # there are 336 30 min intervals in a week
begweek <- 1
for (n in 1:iter){ # separating binary seq into weeks from week 1 to week 118
out[n,] <- seq[begweek:endweek] # creating a matrix to see the data week by week
endweek <- endweek + 336
begweek <- begweek + 336
}
list.out[[i]] <- out # saving bin seq matrix into a list
tmp <- paste0(seq, collapse = "")
split.string <- strsplit(data.time[i], "/")[[1]][4] # to find user name
username <- strsplit(split.string, "_")[[1]][1] # to find user name
fwrite(list(tmp), file = paste0("seq", "_", username, ".txt")) # saving binary seq as txt file
}
# starttime <- min(min.time) # start damy_dtte Tue May 19 2015 04:23:11 GMT
# endtime <- max(max.time) # end date Tue Apr 13 2021 08:17:13 GMT
# 168 hours in 1 week so 169*2 = 336 for 30min intervals
# 52 weeks in 1 year
# our data is roughly 2 years 3 months and 2 weeks
# 52*2+3*4+2 = 118 weeks/ rows
X <-list.out[[1]]
X <-list.out[[40]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
View(list.out)
View(list.out)
#install.packages("survival")
#install.packages("survminer")
library(mosaic)
library(DescTools)
library(binom)
library(boot)
library(exactci)
library(PropCIs)
library(XNomial)
library(readxl)
library(PropCIs)
library(epitools)
library(clp)
library(car)
library(gam)
library(pROC)
library(MASS)
library(leaps)
library(bestglm)
library(ggplot2)
library(arm)
library(survival)
library(survminer)
library(readxl)
HA <- read_excel("Worchester Heart Attack.xlsx")
View(Worchester_Heart_Attack)
favstats(~ age, data = HA) #in years
favstats(~ BodyMassIndex, data = HA) #BMI
favstats(~ HospitalStay, data = HA) #in days
favstats(~ SurvivalTime, data = HA) #in days
cor(HA)
gf_histogram( ~ gender, data=HA)
gf_histogram( ~ History, data=HA)
gf_histogram( ~ Complication, data=HA)
genhist <- tally(~ gender + History, margins = FALSE, data = HA)
genhist
gencomp <- tally(~ gender + Complication, margins = FALSE, data = HA)
gencomp
histcomp <- tally(~ History + Complication, margins = FALSE, data = HA)
histcomp
xchisq.test(genhist, correct=FALSE)
xchisq.test(gencomp, correct=FALSE)
xchisq.test(histcomp, correct=FALSE)
survivefit<-survfit(Surv(SurvivalTime,Status)~1, data= HA)
summary(survivefit)
print(survivefit)
plot(survivefit, xlab="Survival Time", ylab="Survival Prob", ylim=c(0,1))
survivefit2<-survfit(Surv(SurvivalTime,Status)~gender, data=HA)
plot(survivefit2,lty = 1:2,xlab="Survival Time",ylab="Survival Prob", ylim=c(0,1), conf.type = "plain")
legend(1,.3,c("Male","Female"),lty=1:2)
survivefit3<-survfit(Surv(SurvivalTime,Status)~History, data=HA)
plot(survivefit3,lty = 1:2,xlab="Survival Time",ylab="Survival Prob", ylim=c(0,1), conf.type = "plain")
legend(1,.3,c("No History of HA","History of HA"),lty=1:2)
survivefit4<-survfit(Surv(SurvivalTime,Status)~Complication, data=HA)
plot(survivefit4,lty = 1:2,xlab="Survival Time",ylab="Survival Prob", ylim=c(0,1), conf.type = "plain")
legend(1,.3,c("No Other Health Issues","Other Health Issues"),lty=1:2)
print(survivefit2)
#summary(survivefit2)
survdiff(Surv(SurvivalTime,Status)~gender, data= HA)
pairwise_survdiff(Surv(SurvivalTime,Status)~gender,data=HA, p.adjust.method = "bonferroni")
print(survivefit3)
#summary(survivefit3)
survdiff(Surv(SurvivalTime,Status)~History, data= HA)
print(survivefit4)
#summary(survivefit4)
survdiff(Surv(SurvivalTime,Status)~Complication, data= HA)
pairwise_survdiff(Surv(SurvivalTime,Status)~Complication,data=HA, p.adjust.method = "bonferroni")
# with all varibales
heart.full <-coxph(Surv(SurvivalTime,Status)~age+BodyMassIndex+HospitalStay+factor(gender)+factor(History) + factor(Complication) + age*BodyMassIndex + age*HospitalStay + factor(History)*factor(Complication) + factor(gender)*factor(Complication) + factor(gender)*factor(History) + BodyMassIndex*factor(Complication) + BodyMassIndex*factor(History) , data= HA)
stepAIC(heart.full)
dd=190.8-188.6
dd
df=6-5
df
1-pchisq(dd,df) # no difference
heart.aic.1 <- coxph(formula = Surv(SurvivalTime, Status) ~ age + BodyMassIndex + factor(Complication) + factor(gender) + factor(History), data = HA)
summary(heart.aic.1) # we will not use any interactions
heart2 <- coxph(formula = Surv(SurvivalTime, Status) ~ age + BodyMassIndex + factor(Complication) + factor(gender), data = HA)
summary(heart2)
dd=188.6-188.6
dd
df=5-4
df
1-pchisq(dd,df) # no difference
heart3 <- coxph(formula = Surv(SurvivalTime, Status) ~ age + BodyMassIndex + factor(Complication), data = HA)
summary(heart3)
dd=188.6-186.7
dd
df=4-3
df
1-pchisq(dd,df)
cox.zph(heart.full.2)
# no evidence of non prop hazards
plot(cox.zph(heart.full.2))
dfbeta <- residuals(heart.full.2, type='dfbeta')
par(mfrow=c(2,2))
for (j in 1:3) {
plot(dfbeta[,j], ylab=names(coef(heart.full.2))[j])
abline(h=0, lty=2)
}
par(mfrow=c(2,2))
res <- residuals(heart.full.2, type="martingale")
X <- as.matrix(HA[,c("BodyMassIndex", "age")]) # matrix of covariates
par(mfrow=c(2,2))
for (j in 1:2) { # residual plots
plot(X[,j], res, xlab=c("BodyMassIndex", "age")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[,j], res, iter=0))
}
b <- coef(heart.full.2)[c(2,3)] # regression coefficients
for (j in 1:2) { # partial-residual plots
plot(X[,j], b[j]*X[,j] + res, xlab=c("BodyMassIndex", "age")[j],
ylab="component+residual")
abline(lm(b[j]*X[,j] + res ~ X[,j]), lty=2)
lines(lowess(X[,j], b[j]*X[,j] + res, iter=0))
}
vif(heart.full.2)
final.model<- coxph(Surv(SurvivalTime,Status)~age+BodyMassIndex + factor(Complication), data = HA)
summary(final.model)
n.sel=floor(nrow(HA)/2)
n.sel
n.est=nrow(HA)-n.sel
n.est
set.seed(8)
inds=sample(1:nrow(HA), size=n.sel, replace=FALSE)
inds
HA.sel=HA[inds,]
HA.sel
HA.est=HA[-inds,]
# with all varibales
heart.part5 <-coxph(Surv(SurvivalTime,Status)~age+BodyMassIndex+HospitalStay+factor(gender)+factor(History) + factor(Complication) + age*BodyMassIndex + age*HospitalStay + factor(History)*factor(Complication) + factor(gender)*factor(Complication) + factor(gender)*factor(History) + BodyMassIndex*factor(Complication) + BodyMassIndex*factor(History) , data= HA.sel)
stepAIC(heart.part5)
forfun.sel <- coxph(Surv(SurvivalTime,Status)~age+BodyMassIndex+factor(Complication), data=HA.sel)
summary(forfun.sel)
heart.part5.2 <-coxph(Surv(SurvivalTime,Status)~age+ BodyMassIndex + factor(Complication) , data= HA.est)
summary(heart.part5.2)
cox.zph(heart.part5.2)
# no evidence of non prop hazards
plot(cox.zph(heart.part5.2))
dfbeta <- residuals(heart.part5.2, type='dfbeta')
par(mfrow=c(2,2))
for (j in 1:3) {
plot(dfbeta[,j], ylab=names(coef(heart.part5.2))[j])
abline(h=0, lty=2)
}
par(mfrow=c(2,2))
res <- residuals(heart.part5.2, type="martingale")
X <- as.matrix(HA.est[,c("BodyMassIndex", "age")]) # matrix of covariates
par(mfrow=c(2,2))
for (j in 1:2) { # residual plots
plot(X[,j], res, xlab=c("BodyMassIndex", "age")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[,j], res, iter=0))
}
b <- coef(heart.part5.2)[c(2,3)] # regression coefficients
for (j in 1:2) { # partial-residual plots
plot(X[,j], b[j]*X[,j] + res, xlab=c("BodyMassIndex", "age")[j],
ylab="component+residual")
abline(lm(b[j]*X[,j] + res ~ X[,j]), lty=2)
lines(lowess(X[,j], b[j]*X[,j] + res, iter=0))
}
vif(heart.part5.2)
final.est.mod <- coxph(Surv(SurvivalTime,Status)~age+BodyMassIndex + factor(Complication), data = HA.est)
summary(final.est.mod)
final.est.mod.noBMI <- coxph(Surv(SurvivalTime,Status)~age+ factor(Complication), data = HA.est)
summary(final.est.mod.noBMI)
dd= 85.7-82.22
dd
df= 3-2
df
pval=1-pchisq(dd,df)
pval
X <-list.out[[1]]
X <-list.out[[134]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
X <-list.out[[1]]
X <-list.out[[135]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
is.na(list.out)
is.na(list.out[[134]])
sum(is.na(list.out[[134]]))
X <-list.out[[135]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
for(i in 1:136){
show(sum(is.na(list.out[[i]])))
}
X <-list.out[[135]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
nas <- vector()
for(i in 1:136){
nas[i] <- sum(is.na(list.out[[i]])))
X <-list.out[[135]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
nas <- vector()
for(i in 1:136){
nas[i] <- sum(is.na(list.out[[i]]))
}
nas
data.time
list.out[[2]]
tail(list.out[[2]])
list.out <- list() # list that will contain string of 0 and 1s for each user
# min.time <- vector() # to find start time
# max.time <- vector() # to find end time
iter <- 118 # number of weeks in our data collection
out <- matrix(NA, nrow=iter, ncol=336) # matrix that will hold 0 and 1 for the given user
data.time <- Sys.glob("HonThesis-OdalysBar/extract-from-odalyss-list/timestamps/*")
for(i in 1:length(data.time)){ # from the first to last user
my_data <- read.delim(data.time[i],header = FALSE)$V1/60 # importing user data
show(my_data)
my_data <- my_data[which(my_data >= (1546318800/60))] # removing data from before Jan 1 2018
# min.time[i] <- min(my_data)
# max.time[i] <- max(my_data)
seq <-convert.binary.seq(my_data, interval = 30) # converting timestamps to binary series
endweek <- 336 # there are 336 30 min intervals in a week
begweek <- 1
# for (n in 1:iter){ # separating binary seq into weeks from week 1 to week 118
#   out[n,] <- seq[begweek:endweek] # creating a matrix to see the data week by week
#   endweek <- endweek + 336
#   begweek <- begweek + 336
# }
#
# list.out[[i]] <- out # saving bin seq matrix into a list
# tmp <- paste0(seq, collapse = "")
# split.string <- strsplit(data.time[i], "/")[[1]][4] # to find user name
# username <- strsplit(split.string, "_")[[1]][1] # to find user name
#
# fwrite(list(tmp), file = paste0("seq", "_", username, ".txt")) # saving binary seq as txt file
}
# starttime <- min(min.time) # start damy_dtte Tue May 19 2015 04:23:11 GMT
# endtime <- max(max.time) # end date Tue Apr 13 2021 08:17:13 GMT
# 168 hours in 1 week so 169*2 = 336 for 30min intervals
# 52 weeks in 1 year
# our data is roughly 2 years 3 months and 2 weeks
# 52*2+3*4+2 = 118 weeks/ rows
data.time
my_data <- read.delim(data.time[2],header = FALSE)$V1/60 # importing user data
my_data <- my_data[which(my_data >= (1546318800/60))] # removing data from before Jan 1 2018
my_data
length(my_data)
tail(my_data)
head(my_data)
my_data <- read.delim(data.time[2],header = FALSE)$V1/60 # importing user data
my_data <- my_data[which(my_data >= (1546318800/60))] # removing data from before Jan 1 2018
head(my_data)
tail(my_data)
xrev <- apply(my_data,2,rev)
xrev <- apply(my_data,rev)
?apply
xrev <- apply(my_data,1,rev)
my_data <- read.delim(data.time[2],header = FALSE)$V1/60 # importing user data
my_data <- my_data[which(my_data >= (1546318800/60))] # removing data from before Jan 1 2018
head(my_data)
tail(my_data)
xrev <- apply(my_data,1,rev)
my_data <- read.delim(data.time[2],header = FALSE)$V1/60 # importing user data
my_data <- my_data[which(my_data >= (1546318800/60))] # removing data from before Jan 1 2018
head(my_data)
tail(my_data)
seq <-convert.binary.seq(my_data, interval = 30)
seq
tail(seq)
is.na(seq)
sum(is.na(seq))
list.out <- list() # list that will contain string of 0 and 1s for each user
# min.time <- vector() # to find start time
# max.time <- vector() # to find end time
iter <- 118 # number of weeks in our data collection
out <- matrix(NA, nrow=iter, ncol=336) # matrix that will hold 0 and 1 for the given user
data.time <- Sys.glob("HonThesis-OdalysBar/extract-from-odalyss-list/timestamps/*")
for(i in 1:length(data.time)){ # from the first to last user
my_data <- read.delim(data.time[i],header = FALSE)$V1/60 # importing user data
my_data <- my_data[which(my_data >= (1546318800/60))] # removing data from before Jan 1 2018
# min.time[i] <- min(my_data)
# max.time[i] <- max(my_data)
seq <-convert.binary.seq(my_data, interval = 30) # converting timestamps to binary series
endweek <- 336 # there are 336 30 min intervals in a week
begweek <- 1
for (n in 1:iter){ # separating binary seq into weeks from week 1 to week 118
out[n,] <- seq[begweek:endweek] # creating a matrix to see the data week by week
endweek <- endweek + 336
begweek <- begweek + 336
}
tmp <- paste0(seq, collapse = "")
out[is.na(out)] <- 0
list.out[[i]] <- out # saving bin seq matrix into a list
# split.string <- strsplit(data.time[i], "/")[[1]][4] # to find user name
# username <- strsplit(split.string, "_")[[1]][1] # to find user name
# fwrite(list(tmp), file = paste0("seq", "_", username, ".txt")) # saving binary seq as txt file
}
# starttime <- min(min.time) # start damy_dtte Tue May 19 2015 04:23:11 GMT
# endtime <- max(max.time) # end date Tue Apr 13 2021 08:17:13 GMT
# 168 hours in 1 week so 169*2 = 336 for 30min intervals
# 52 weeks in 1 year
# our data is roughly 2 years 3 months and 2 weeks
# 52*2+3*4+2 = 118 weeks/ rows
data.time
X <-list.out[[135]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
nas <- vector()
for(i in 1:136){
nas[i] <- sum(is.na(list.out[[i]]))
}
nas
X <-list.out[[134]]
xrev <- apply(X,2,rev)
image(t(xrev))
#rowSums(X)
plot(colMeans(X, na.rm = TRUE), type= "l")
nas <- vector()
for(i in 1:136){
nas[i] <- sum(is.na(list.out[[i]]))
}
nas
